#!/bin/sh

# Author: Matthew Ellis

usage() {
	# Print usage
	echo "Automatically generate a make recipe from a source file"
	echo
	echo "Syntax: getmakerecipe [-h] file"
	echo
	echo "parameters:"
	echo "file	source file"
	echo
	echo "options:"
	echo "h		Print this help"
}

# Defaults
DEFAULT_CSL="journal-of-process-control.csl"
DEFAULT_FROM="markdown+latex_macros+link_attributes"
DEFAULT_PDF_ENGINE="latexmk"
DEFAULT_HIGHLIGHT="tango"
DEFAULT_TEMPLATE="default.latex"
BLDDIR=.make
DISTDIR=dist
DIST_TEX_SUPPORT='(eps|png|jpg|jpeg|pdf|bib)'
# ext,default output, default recipe, start comment, end comment,
# !end-build before or after comment mark, find other dependencies
BUILD='.md,pdf,pandoc_pdf,<!--,-->,false,!include(",")
.py,eps,python,#,#,true,,
.ipynb,eps,jupyter_notebooks,<!--,-->,false,,
.m,eps,matlab,%,%,true,,
.tex,pdf,latex_pdf,%,%,true,,'

# Parse inputs
[[ -z "$1" || "$1" == "-h" || "$1" == "--help" ]] && usage && exit
SRC="$1"

pandoc () {
	# General pandoc recipe handler
	#
	# Inputs:
	#	$1: ext
	#	$2: to
	local BLD_TO=`echo "${TO}" | tr ' ' '\n' | grep "*.${1}"`
	[[ -z ${BLD_TO} ]] && BLD_TO=${BASE}.${1}
	# Note: build depends are specified by !include(" ... ")
	#  depends is the concatenation of that specified in !build
	#  and grepped from the src
	local RECIPE="${BLD_TO} : ${SRC} ${BIB} ${DEPENDS} ${BLD_DEPENDS}
	@echo \"Building \$@ with pandoc by converting \$< to ${1}\"
	@sed '/${COMMENT_START}/,/${COMMENT_END}/d${SED_CMD}' \$< | \${GPP} | \\
		\${PANDOC} --from ${FROM} \\
			${TEMPLATE} \\
			${HIGHLIGHT} \\"
	[[ ! -z ${BIBLIOGRAPHY} ]] && RECIPE+="
			${BIBLIOGRAPHY} \\"
	[[ ! -z ${FILTERS} ]] && RECIPE+="
			${FILTERS} \\"
	[[ ${1} == 'pdf' ]] && RECIPE+="
			--pdf-engine=${ENGINE} \\"
	RECIPE+="
			--to ${2} --output \$@
	"
	echo "DEST += ${BLD_TO}
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

pandoc_pdf () {
	# Pandoc PDF (notes) recipe
	pandoc 'pdf' 'pdf'
}

pandoc_tex () {
	# Pandoc TEX (notes) recipe
	TO='latex'
	[ $(contains ${RECIPES} 'pandoc_beamer') == true ] && TO='beamer'
	pandoc 'tex' ${TO}
}

pandoc_beamer () {
	# Pandoc Beamer recipe
	pandoc 'pdf' 'beamer'
}

pandoc_pptx () {
	# Pandoc pptx recipe
	pandoc 'pptx' 'pptx'
}

pandoc_assignment () {
	# Pandoc homework

	# Problem statements
	SED_CMD="; /\\\\begin{solution}/,/\\\\end{solution}/d"
	pandoc 'pdf' 'pdf'

	# Reset
	SED_CMD=
	OLD_BASE="${BASE}"
	BASE="${BASE}-solution"
	pandoc 'pdf' 'pdf'
	BASE="${OLD_BASE}"
}

pandoc_submission () {
	# Create a packaged Latex for manuscript submission
	local RECIPE="DIST_TEX += ${DISTDIR}/${BASE}.tex
depends:

\${DISTDIR}/${BASE}.tex : ${SRC} ${BIB} ${DEPENDS} ${BLD_DEPENDS}
	@echo \"Building \$@ with pandoc by converting \$< to latex\"
	@mkdir -p \${DISTDIR}
	@sed '/${COMMENT_START}/,/${COMMENT_END}/d' \$< | \${GPP} | \\
		sed 's/fig\///g' | \\
		\${PANDOC} --from ${FROM} \\
			${TEMPLATE} \\
			${HIGHLIGHT} \\"
	[[ ! -z ${BIBLIOGRAPHY} ]] && RECIPE+="
			${BIBLIOGRAPHY} \\"
	[[ ! -z ${FILTERS} ]] && RECIPE+="
			${FILTERS} \\"
	[[ ${1} == 'pdf' ]] && RECIPE+="
			--pdf-engine=${ENGINE} \\"
	RECIPE+="
			--to latex --output \$@
	@cp \`grep -oE '[a-zA-Z0-9/_-]*\.${DIST_TEX_SUPPORT}' ${SRC}\` ${DISTDIR}
	cd ${DISTDIR} ; \\
		latexmk -pdf \${notdir \$@} ; \\
		sed -i -ne '/\\\\bibliographystyle/ {r \${basename \$<}.bbl' -e ':a; n; /\.bib\}/ {b}; ba}; p' \${notdir \$@} ; \\
		latexmk -C \${notdir \$@} ; \\
		latexmk -pdf \${notdir \$@} ; \\
		latexmk -c \${notdir \$@} ; \\
		rm -rf *.bbl *.spl *-eps-converted-to.pdf *.nlo *.nls
	"
	echo "${RECIPE}" >> "${MAKEH}"
}

get_pandoc_options () {
	# Get Pandoc options
	[[ $(contains ${RECIPES} 'pandoc_tex') == false ]] && RECIPES+=('pandoc_tex')
	FROM=$(get_instruction 'from' ${DEFAULT_FROM})
	TEMPLATE="--template=\${PANDOC_TEMPLATE_DIR}/$(get_instruction 'template' ${DEFAULT_TEMPLATE})"
	ENGINE=$(get_instruction 'engine' ${DEFAULT_PDF_ENGINE})
	BIB=$(get_instruction 'bib')
	[[ ! -z ${BIB} ]] && CSL=$(get_instruction 'csl' ${DEFAULT_CSL}) && \
		BIBLIOGRAPHY="--bibliography=${BIB} --filter pandoc-citeproc --csl \${PANDOC_TEMPLATE_DIR}/${CSL}"
	HIGHLIGHT="--highlight-style $(get_instruction 'highligh' ${DEFAULT_HIGHLIGHT})"
	BLD_DEPENDS=`getblock -b "${DEP_START}" -e "${DEP_END}" ${SRC}`
	FLTRS=($(get_instruction 'filters'))
	FILTERS=
	for f in ${FLTRS[@]} ; do
		FILTERS+="--filter $f "
	done

	# Grep figure depends from file
	GPP='gpp -U "!" "" "(" "," ")" "(" ")" "" ""'
	FIGS=`sed "/${COMMENT_START}/,/${COMMENT_END}/d" "${SRC}" | ${GPP} | \
		grep -oE '[a-zA-Z0-9/_-]*\.(eps|png|jpg|jpeg|pdf)'`

	DEPENDS=$(echo "$DEPENDS" | tr ' ' '\n')
	DEPENDS+="
${FIGS}"
	DEPENDS=$(echo "${DEPENDS}" | sort -u | tr '\n' ' ')
}

latex_pdf () {
	#TODO: do we need to worry about dependencies with latexmk?
	RECIPE="${BASE}.pdf : ${SRC}
	@echo \"Building \$@\"
	@cd $(dirname ${SRC}) ; \${LATEXMK} -pdf -pdflatex='\${PDFLATEX}' \$(notdir \$<)
	"
	echo "DEST += ${BASE}.pdf
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

latex_eps () {
	#TODO: automatically add latex_pdf if needed
	RECIPE="${BASE}.eps : ${BASE}.pdf
	@echo \"Building \$@\"
	@\${PDFTOPS} ${BASE}.pdf
	"
	echo "DEST += ${BASE}.eps
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

latex_png () {
	#TODO: automatically add latex_pdf if needed
	RECIPE="${BASE}.png : ${BASE}.pdf
	@echo \"Building \$@\"
	@cd $(dirname ${SRC}) ; convert -density 800 \$(notdir \$<) \$(notdir \$@)
	"
	echo "DEST += ${BASE}.png
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

python () {
	[[ -z ${TO} ]] && TO=${BASE}.${DEFAULT_EXT}
	local RECIPE="${TO} : ${SRC} ${DEPENDS}
	@echo \"Running python on \$<.\"
	@\${PYTHON} ${SRC}
	"
	echo "DEST += ${TO}
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

jupyter_notebooks () {
	TO=$(sed 's/^[ \s\t]*"\([a-zA-Z1-9./_ ]*\)\\n",[ \s\t]*/\1/' <<<${TO})
	DEPENDS=$(sed 's/^[ \s\t]*"\([a-zA-Z1-9./_ ]*\)\\n",[ \s\t]*$/\1/' <<<${DEPENDS})
	local RECIPE="${TO} : ${SRC} ${DEPENDS}
	@echo \"Running Jupyter-notebook conversion on \$<.\"
	\$(eval PY_FILE := \$(<:.ipynb=.py))
	@jupyter-nbconvert --to python --stdout \$< >> \${PY_FILE}
	cd \$(dir \$<); \${PYTHON} \${notdir \${PY_FILE}}
	@rm -rf \${PY_FILE}
	"
	echo "DEST += ${TO}
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"

}

matlab () {
	[[ -z ${TO} ]] && TO=${BASE}.${DEFAULT_EXT}
	local RECIPE="${TO} : ${SRC} ${DEPENDS}
	@echo \"Running Matlab on \$<.\"
	\${MATLAB} -log -nodesktop -nosplash -noFigureWindows \\
		-r \"try, run('\$<'); catch err, disp(err.message); quit(1); end, quit(0)\"
	"
	echo "DEST += ${TO}
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

octave () {
	[[ -z ${TO} ]] && TO=${BASE}.${DEFAULT_EXT}
	local RECIPE="${TO} : ${SRC} ${DEPENDS}
	@echo \"Running Matlab on \$<.\"
	\${OCTAVE} --no-gui --no-window-system \\
		--eval \"try, run('\$<'); catch err, disp(err.message); quit(1); end, quit(0)\"
	"
	echo "DEST += ${TO}
	" >> "${MAKEH}"
	echo "${RECIPE}" >> "${MAKEH}"
}

#TODO: do-latex, do-matlab (or octave); automatic builds of virtualenvs

get_instruction () {
	# Get the instruction from the instruction list
	local result=`echo "${INSTRUCTIONS}" | sed -n "${PREFIX}${1}:${SUFFIX}"`
	[[ -z ${result} ]] && result=$2
	echo "$result"
}

contains () {
	# Array contains function
	local n=$#
	local value=${!n}
	local length=`echo -n $value | wc -c`
	for ((i=1;i<$#;i++)) {
		val=`echo "${!i}" | cut -c1-$length`
		if [[ "${val}" == "${value}" ]]; then
			echo true
			return 0
		fi
	}
	echo false
}

# Base and extension
BASE=${SRC%.*}
EXT=.${SRC##*.}
SRC_BUILD=`echo "$BUILD" | grep -E $EXT,`
SRCDIR=$(dirname "${SRC}")
MAKEH=${BLDDIR}/${SRC}.make

# Get all properties
read DEFAULT_EXT DEFAULT_RECIPE COMMENT_START COMMENT_END AFTER_MARK DEP_START DEP_END \
	<<< $(echo "${SRC_BUILD}" | awk -F ',' '{print $2" "$3" "$4" "$5" "$6" "$7" "$8}')

if [ "${AFTER_MARK}" == "true" ]
then
	BUILD_END="${COMMENT_END}\s*\(!end-build\)"
else
	BUILD_END="\(!end-build\)\s*${COMMENT_END}"
fi

# Build instructions
INSTRUCTIONS=`getblock -b "${COMMENT_START}\s*!build" -e "${BUILD_END}" ${SRC}`
PREFIX="s/\(${COMMENT_START}\)\?\s*\("
SUFFIX="\)\s*//p"

# Basic requirements for building
TO=$(get_instruction 'to')
DEPENDS=$(get_instruction 'depends')
RECIPES=($(get_instruction 'recipes' ${DEFAULT_RECIPE}))

# Load a bunch of stuff for pandoc recipe
[[ $(contains ${RECIPES} 'pandoc') == true ]] && get_pandoc_options

# Create .make file (overwrite if exists)
mkdir -p ${BLDDIR}/$(dirname ${SRC})
echo "# These recipes are automatically generated by getmakerecipe
" > "${MAKEH}"

# Loop through all the recipes and add one
for r in "${RECIPES[@]}"
do
	${r}
done
